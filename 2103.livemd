<!-- livebook:{"file_entries":[{"name":"2103.txt","type":"attachment"}]} -->

# Advent of Code 2021 - Day 3 - Binary Diagnostic

```elixir
Mix.install(
  [
    {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"},
    {:kino_explorer, "~> 0.1.11"}
  ],
  force: true
)
```

## Introduction

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the `power consumption`.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the **gamma rate** and the **epsilon rate**). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

Each bit in the gamma rate can be determined by finding the **most common bit in the corresponding position** of all numbers in the diagnostic report. For example, given the following diagnostic report:

```
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
```

Considering only the first bit of each number, there are five 0 bits and seven 1 bits. Since the most common bit is 1, the first bit of the gamma rate is 1.

The most common second bit of the numbers in the diagnostic report is 0, so the second bit of the gamma rate is 0.

The most common value of the third, fourth, and fifth bits are 1, 1, and 0, respectively, and so the final three bits of the gamma rate are 110.

So, the gamma rate is the binary number `10110`, or **22** in decimal.

The epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is 01001, or 9 in decimal. Multiplying the gamma rate (22) by the epsilon rate (9) produces the power consumption, 198.

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. What is the power consumption of the submarine? (Be sure to represent your answer in decimal, not binary.)

## Parser

<!-- livebook:{"attrs":{"day":"3","session_secret":"SESSION","variable":"puzzle_input","year":"2021"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2021", "3", System.fetch_env!("LB_SESSION"))
```

### Code

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.graphemes/1)
    |> Enum.map(fn inner_list ->
      Enum.map(inner_list, &String.to_integer/1)
    end)
  end
end

puzzle_input = Kino.FS.file_path("2103.txt") |> File.read!()
Parser.parse(puzzle_input)
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  00100
  11110
  10110
  10111
  10101
  01111
  00111
  11100
  10000
  11001
  00010
  01010
  """
  @expected [
    [0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0]
  ]

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":1} -->

## Part One

### Code

<!-- livebook:{"continue_on_error":true} -->

```elixir
defmodule PartOne do
  def resolve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def min_occur_value(map) do
    {min_key, _} = Enum.min_by(Map.to_list(map), fn {_, value} -> value end)
    min_key
  end

  def max_occur_value(map) do
    {max_key, _} = Enum.max_by(Map.to_list(map), fn {_, value} -> value end)
    max_key
  end

  def assemble_values(list) do
    max =
      Enum.map(list, &max_occur_value/1)
      |> Enum.join()
      |> Integer.parse(2)
      |> elem(0)

    min =
      Enum.map(list, &min_occur_value/1)
      |> Enum.join()
      |> Integer.parse(2)
      |> elem(0)

    max * min
  end

  def count_frequencies([]), do: []

  def count_frequencies(list) do
    [
      Enum.reduce(hd(list), %{}, fn item, acc ->
        Map.update(acc, item, 1, &(&1 + 1))
      end)
      | count_frequencies(tl(list))
    ]
  end

  def transpose([[] | _]), do: []

  def transpose(m) do
    [Enum.map(m, &hd/1) | transpose(Enum.map(m, &tl/1))]
  end

  def run(input) do
    input |> transpose() |> count_frequencies() |> assemble_values()
  end
end

PartOne.resolve(Parser.parse(puzzle_input))
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input [
    [0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0]
  ]
  @expected 198

  test "part one - transpose" do
    actual = @input |> transpose() |> Enum.at(0)
    assert actual == [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0]
  end

  test "part one - example" do
    actual = run(@input)
    assert actual == @expected
  end

  test "part one - actual" do
    puzzle_input = Kino.FS.file_path("2103.txt") |> File.read!()
    actual = run(Parser.parse(puzzle_input))
    assert actual == 3_885_894
  end
end

ExUnit.run()
```

### Solution

```elixir
PartOne.resolve(Parser.parse(puzzle_input))
```

<!-- livebook:{"branch_parent_index":1} -->

## Part Two

### Code

```elixir
defmodule PartTwo do
  def resolve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input ""
  @expected nil

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution

```elixir
PartTwo.resolve(puzzle_input)
```

<!-- livebook:{"offset":6196,"stamp":{"token":"XCP.tcEDYgiZwLc52yJgAF0nHIGHuyqKi0L_YI42ICLOIhjaSy3Vfqo3rnVbaeOH_O4x5Rqk_Alq1XW0YdtDxjH1eBlKX3TaAs5E55vxwbDGNbQmHg","version":2}} -->

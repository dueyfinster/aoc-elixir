<!-- livebook:{"file_entries":[{"name":"2103.txt","type":"attachment"}],"persist_outputs":true} -->

# Advent of Code 2021 - Day 3 - Binary Diagnostic

```elixir
Mix.install(
  [
    {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"},
    {:kino_explorer, "~> 0.1.11"}
  ],
  force: true
)
```

## Introduction

Puzzle: [Binary Diagnostic](https://adventofcode.com/2021/day/3)

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a list of binary numbers which, when decoded properly, can tell you many useful things about the conditions of the submarine. The first parameter to check is the `power consumption`.

You need to use the binary numbers in the diagnostic report to generate two new binary numbers (called the **gamma rate** and the **epsilon rate**). The power consumption can then be found by multiplying the gamma rate by the epsilon rate.

Each bit in the gamma rate can be determined by finding the **most common bit in the corresponding position** of all numbers in the diagnostic report. For example, given the following diagnostic report:

```
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
```

Considering only the first bit of each number, there are five 0 bits and seven 1 bits. Since the most common bit is 1, the first bit of the gamma rate is 1.

The most common second bit of the numbers in the diagnostic report is 0, so the second bit of the gamma rate is 0.

The most common value of the third, fourth, and fifth bits are 1, 1, and 0, respectively, and so the final three bits of the gamma rate are 110.

So, the gamma rate is the binary number `10110`, or **22** in decimal.

The epsilon rate is calculated in a similar way; rather than use the most common bit, the least common bit from each position is used. So, the epsilon rate is 01001, or 9 in decimal. Multiplying the gamma rate (22) by the epsilon rate (9) produces the power consumption, 198.

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, then multiply them together. What is the power consumption of the submarine? (Be sure to represent your answer in decimal, not binary.)

## Parser

<!-- livebook:{"attrs":{"day":"3","session_secret":"SESSION","variable":"puzzle_input","year":"2021"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2021", "3", System.fetch_env!("LB_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "110000000001\n010011111011\n111000011110\n110101011110\n100000010100\n000101101111\n110100101000\n011100010001\n101001011011\n011000001100\n111101001011\n010001100100\n100101011010\n111101110101\n101001111100\n010010010101\n011100011000\n010110011101\n110001110101\n001111000010\n111011001011\n111111111110\n010000000100\n001011111101\n100111110101\n011011110100\n110101000100\n111010001110\n110101001011\n011100100110\n011100001001\n101001111101\n111111000010\n010010001100\n110010011001\n010100010010\n011010010000\n101111000100\n001010100101\n100010010100\n001000000110\n000011110100\n101101100001\n111100000111\n011010001110\n010110001000\n111101111010\n001001010111\n011001010011\n000111000010\n000010110001\n101000010111\n111010000100\n111001110111\n000000110001\n011111000110\n010110010111\n110100001001\n101100110110\n100111111000\n110000110000\n110110111101\n110011011100\n010001010010\n011011000101\n000001100010\n011001101001\n000111111011\n111000001101\n110100000101\n011000011011\n100101100110\n001001000001\n111011011010\n010101110110\n100011100000\n100000001011\n110101111001\n000101001000\n110111111010\n011001111111\n101000000101\n101000011111\n010010000111\n101101111100\n101110100001\n100111100101\n101111001100\n110101001111\n011100001111\n010000011110\n000010111111\n011110100101\n100010010110\n011101110011\n000000010111\n110111000110\n100110010100\n011110101111\n101101000111\n111111011100\n110000100010\n010110001010\n011001000100\n111001100011\n111101110100\n000011011100\n110011010001\n110011100110\n100000011110\n100100000010\n001000100001\n011000011111\n001001101001\n000100011100\n100001010000\n100000110010\n111001101000\n100011101101\n000111000101\n000011000101\n111110001011\n001111011101\n110110010100\n011010011011\n111111111010\n001010111111\n101111101001\n010000111100\n111010110111\n100100011000\n111010010110\n010100111100\n101001010000\n011100011011\n100101001110\n011100010110\n111010011100\n100110011001\n100110000110\n111010110010\n011000010111\n111101000110\n000001000011\n001011111011\n011100000111\n111011100100\n101111110000\n011111010010\n001100111000\n011001000010\n100110100111\n101000101110\n110100101100\n011101001100\n111100100011\n110101001101\n101111000110\n111010100100\n100101010101\n111011100000\n011100101010\n111111001111\n010010100001\n111001111111\n101000110101\n010001101010\n000110110011\n001010110011\n110001101001\n110110000011\n100111110011\n000100101100\n111010101100\n101011101100\n010110000100\n101001010101\n000001010011\n011110000000\n101111110011\n001010001000\n110000010001\n101010101100\n011010111010\n010100101000\n101100011011\n010010101011\n110101110001\n010101001101\n011110011001\n100000110011\n010110110000\n101100100010\n010000110100\n001000100101\n100011100011\n111000010110\n000110011000\n000011011000\n010101001000\n101000010100\n111011111011\n010110010001\n100111100011\n011011111100\n001010011110\n011110110101\n111100101110\n001001011110\n010100010111\n100011010001\n110110000111\n001000001101\n001011110001\n111001000011\n101101011101\n111000111010\n111111110001\n001100000000\n110011011010\n011010101001\n011010101011\n011010011100\n100100111110\n111001011110\n001010001101\n101101010100\n100100110100\n011000111111\n101011010100\n111010100110\n001111010010\n011001100000\n011010010100\n001100001010\n101001001111\n111011110110\n100101100001\n000100110010\n101111001001\n111001011000\n100010001101\n101101001010\n011001110001\n010110010110\n000100010100\n011011011100\n000101101011\n110010011110\n010010011010\n111110110010\n000010001111\n000010010011\n000000111010\n110001100011\n000010000100\n101011111000\n110111001001\n101111100000\n110101111000\n100010000011\n000001111111\n000110001110\n000010000000\n110110011110\n000101101000\n001101111011\n011101101100\n101100011101\n110001010100\n011010111000\n011101101010\n110010110101\n100101100000\n101001011100\n100101001010\n011110111011\n111101111100\n101000111001\n111001110001\n101100001111\n100001100111\n011001101000\n111000100101\n000000001011\n110011100011\n111010001011\n111100001011\n111101101001\n111001101110\n000110100101\n000111100001\n101101101101\n100000000011\n001100011111\n101101111110\n101010111000\n010100000001\n000110011011\n000100011000\n000001110110\n100111101001\n001111011110\n000010011110\n101001000010\n101001011111\n110011010010\n101100010110\n101110001111\n000111110011\n011011101010\n101010011010\n101100111001\n111111000000\n101100110101\n1" <> ...}
```

### Code

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.graphemes/1)
    |> Enum.map(fn inner_list ->
      Enum.map(inner_list, &String.to_integer/1)
    end)
  end
end

puzzle_input = Kino.FS.file_path("2103.txt") |> File.read!()
Parser.parse(puzzle_input)
```

<!-- livebook:{"output":true} -->

```
[
  [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
  [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1],
  [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],
  [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
  [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
  [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0],
  [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1],
  [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1],
  [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],
  [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1],
  [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0],
  [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0],
  [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1],
  [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],
  [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
  [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],
  [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],
  [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1],
  [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
  [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
  [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
  [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
  [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
  [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0],
  [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0],
  [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1],
  [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
  [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1],
  [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
  [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
  [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
  [1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
  [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
  [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
  [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, ...],
  [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, ...],
  [0, 0, 1, 0, 0, 0, 0, 0, 0, ...],
  [0, 0, 0, 0, 1, 1, 1, 1, ...],
  [1, 0, 1, 1, 0, 1, 1, ...],
  [1, 1, 1, 1, 0, 0, ...],
  [0, 1, 1, 0, 1, ...],
  [0, 1, 0, 1, ...],
  [1, 1, 1, ...],
  [0, 0, ...],
  [0, ...],
  [...],
  ...
]
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  00100
  11110
  10110
  10111
  10101
  01111
  00111
  11100
  10000
  11001
  00010
  01010
  """
  @expected [
    [0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0]
  ]

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
.
Finished in 0.00 seconds (0.00s async, 0.00s sync)
1 test, 0 failures

Randomized with seed 337591
```

<!-- livebook:{"output":true} -->

```
%{total: 1, skipped: 0, failures: 0, excluded: 0}
```

<!-- livebook:{"branch_parent_index":1} -->

## Part One

### Code

<!-- livebook:{"continue_on_error":true} -->

```elixir
defmodule PartOne do
  def resolve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def min_occur_value(map) do
    {min_key, _} = Enum.min_by(Map.to_list(map), fn {_, value} -> value end)
    min_key
  end

  def max_occur_value(map) do
    {max_key, _} = Enum.max_by(Map.to_list(map), fn {_, value} -> value end)
    max_key
  end

  def bin_list_to_int(list, fun) do
    Enum.map(list, fun)
    |> Enum.join()
    |> Integer.parse(2)
    |> elem(0)
  end

  def assemble_values(list) do
    max = bin_list_to_int(list, &max_occur_value/1)

    min = bin_list_to_int(list, &min_occur_value/1)

    max * min
  end

  def count_frequencies([]), do: []

  def count_frequencies(list) do
    [
      Enum.reduce(hd(list), %{}, fn item, acc ->
        Map.update(acc, item, 1, &(&1 + 1))
      end)
      | count_frequencies(tl(list))
    ]
  end

  def transpose([[] | _]), do: []

  def transpose(m) do
    [Enum.map(m, &hd/1) | transpose(Enum.map(m, &tl/1))]
  end

  def run(input) do
    input |> transpose() |> count_frequencies() |> assemble_values()
  end
end

PartOne.resolve(Parser.parse(puzzle_input))
```

<!-- livebook:{"output":true} -->

```
--- Part One ---
Result: 3885894
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input [
    [0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0]
  ]
  @expected 198

  test "part one - transpose" do
    actual = @input |> transpose() |> Enum.at(0)
    assert actual == [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0]
  end

  test "part one - count frequencies" do
    actual = @input |> transpose() |> count_frequencies()

    assert actual == [
             %{0 => 5, 1 => 7},
             %{0 => 7, 1 => 5},
             %{0 => 4, 1 => 8},
             %{0 => 5, 1 => 7},
             %{0 => 7, 1 => 5}
           ]
  end

  test "part one - max num in binary" do
    actual =
      @input |> transpose() |> count_frequencies() |> Enum.map(&max_occur_value/1) |> Enum.join()

    assert actual == "10110"
  end

  test "part one - min num in binary" do
    actual =
      @input |> transpose() |> count_frequencies() |> Enum.map(&min_occur_value/1) |> Enum.join()

    assert actual == "01001"
  end

  test "part one - max num" do
    actual = @input |> transpose() |> count_frequencies() |> bin_list_to_int(&max_occur_value/1)
    assert actual == 22
  end

  test "part one - min num" do
    actual = @input |> transpose() |> count_frequencies() |> bin_list_to_int(&min_occur_value/1)
    assert actual == 9
  end

  test "part one - example" do
    actual = run(@input)
    assert actual == @expected
  end

  test "part one - actual" do
    puzzle_input = Kino.FS.file_path("2103.txt") |> File.read!()
    actual = run(Parser.parse(puzzle_input))
    assert actual == 3_885_894
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
........
Finished in 0.00 seconds (0.00s async, 0.00s sync)
8 tests, 0 failures

Randomized with seed 337591
```

<!-- livebook:{"output":true} -->

```
%{total: 8, skipped: 0, failures: 0, excluded: 0}
```

### Solution

```elixir
PartOne.resolve(Parser.parse(puzzle_input))
```

<!-- livebook:{"output":true} -->

```
--- Part One ---
Result: 3885894
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"branch_parent_index":1} -->

## Part Two

Next, you should verify the **life support rating**, which can be determined by multiplying the **oxygen generator rating** by the **CO2 scrubber rating**.

Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part. Both values are located using a similar process that involves filtering out values until only one remains. Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and **consider just the first bit** of those numbers. Then:

* Keep only numbers selected by the **bit criteria** for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
* If you only have one number left, stop; this is the rating value for which you are searching.
* Otherwise, repeat the process, considering the next bit to the right.

The **bit criteria** depends on which type of rating value you want to find:

* To find **oxygen generator rating**, determine the **most common** value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 1 in the position being considered.
* To find **CO2 scrubber rating**, determine the **least common** value (0 or 1) in the current bit position, and keep only numbers with that bit in that position. If 0 and 1 are equally common, keep values with a 0 in the position being considered.

For example, to determine the **oxygen generator rating** value using the same example diagnostic report from above:

* Start with all 12 numbers and consider only the first bit of each number. There are more 1 bits (7) than 0 bits (5), so keep only the 7 numbers with a 1 in the first position: 11110, 10110, 10111, 10101, 11100, 10000, and 11001.
* Then, consider the second bit of the 7 remaining numbers: there are more 0 bits (4) than 1 bits (3), so keep only the 4 numbers with a 0 in the second position: 10110, 10111, 10101, and 10000.
* In the third position, three of the four numbers have a 1, so keep those three: 10110, 10111, and 10101.
* In the fourth position, two of the three numbers have a 1, so keep those two: 10110 and 10111.
* In the fifth position, there are an equal number of 0 bits and 1 bits (one each). So, to find the oxygen generator rating, keep the number with a 1 in that position: 10111.
* As there is only one number left, stop; the **oxygen generator rating** is 10111, or **23** in decimal.

Then, to determine the **CO2 scrubber rating** value from the same example above:

* Start again with all 12 numbers and consider only the first bit of each number. There are fewer 0 bits (5) than 1 bits (7), so keep only the 5 numbers with a 0 in the first position: 00100, 01111, 00111, 00010, and 01010.
* Then, consider the second bit of the 5 remaining numbers: there are fewer 1 bits (2) than 0 bits (3), so keep only the 2 numbers with a 1 in the second position: 01111 and 01010.
* In the third position, there are an equal number of 0 bits and 1 bits (one each). So, to find the **CO2 scrubber rating**, keep the number with a 0 in that position: 01010.
* As there is only one number left, stop; the **CO2 scrubber rating** is 01010, or **10** in decimal.

Finally, to find the life support rating, multiply the oxygen generator rating (23) by the CO2 scrubber rating (10) to get **230**.

Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together. **What is the life support rating of the submarine?** (Be sure to represent your answer in decimal, not binary.)

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartTwo do
  def resolve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input [
    [0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0]
  ]
  @expected nil

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution

```elixir
PartTwo.resolve(puzzle_input)
```

<!-- livebook:{"offset":18358,"stamp":{"token":"XCP.BLA-I5FioqgO9EWH-kMjHjIH30PayAowMYpDIGA_BpnBKpaTRtkOrLrn7aFpGkp23_ApyHW_GwUrsZeoUPuRd6bnM4P0-_w0vWGcFkt1tiqVVA","version":2}} -->
